"CREATE POST" 

1. In Staff Transfer Post working as you can see in this code first the entry of staff transfer table
2. After the insertion in staff transfer table we need to update some table first table we need to update is 'Staffinfo' table as you can see in 'TransferStaff' void in code.
3. After it we need to update 'StaffShift' table as you can see in 'TransferStaffShift' void in code.
4. After it we need to update 'UserCampus' table as you can see in 'TransferUserCampus' void in code.
5. After it we need to update 'UserCampus' table as you can see in 'InsertAENUserCampus' void in code.
6. In point 4 and 5 there is a if else condition as you can see in line number 63 if campus id 11 than insert if not than update any campus.
7. After it we need to update 'Users' table as you can see in 'TransferUser' void in code. 


CODE :

[HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(StaffTransferViewModel model)
        {
            try
            {
                var campusId = this.GetCampusIdSelected();
                if (ModelState.IsValid)
                {
                    var staff = db.StaffInfoes.Find(model.StaffId);
                    var fromcampusId = staff.IsAEN == 1 ? 11 : staff.CampusId;
                    if (staff == null)
                    {
                        ModelState.AddModelError("", "Staff not found.");
                        return RedirectToAction("Create");
                    }

                    var StaffShift = db.StaffShifts.FirstOrDefault(s => s.StaffId == model.StaffId);

                    var staffTransfer = new StaffTransfer
                    {
                        StaffId = model.StaffId,
                        Transfer_Type = model.Transfer_Type,
                        Transfer_Date = model.Transfer_Date,
                        Reason_for_Transfer = model.Reason_for_Transfer,
                        Transfer_from_Campus = fromcampusId,
                        Transfer_To_Campus = model.Transfer_To_Campus,
                        DepartmentId = model.DepartmentId,
                        DesignationId = model.DesignationId,
                        ReportingOfficerId = model.ReportingOfficerId,
                        Transfer_initiated_by = model.Transfer_initiated_by,
                        Transfer_approval = model.Transfer_approval,
                        Remarks = model.Remarks,
                        status = true,
                        CampusId = campusId,
                        CreatorId = this.UserId(),
                        CreateDate = DateTime.UtcNow.AddHours(5)
                    };

                    using (var transaction = db.Database.BeginTransaction())
                    {
                        try
                        {
                            db.StaffTransfers.Add(staffTransfer);
                            db.SaveChanges();

                            var userCampus = staff.UserCampus.FirstOrDefault();
                            if (userCampus != null)
                            {
                                if (model.Transfer_To_Campus == 11)
                                    InsertAENUserCampus(model.StaffId, (int)model.Transfer_To_Campus);
                                else
                                    TransferUserCampus(model.StaffId, (int)model.Transfer_To_Campus, staff.CampusId);

                                TransferUser(model.StaffId, (int)model.Transfer_To_Campus);
                            }

                            if (StaffShift != null)
                            {
                                TransferStaffShift(model.StaffId, (int)model.Transfer_To_Campus);
                            }

                            TransferStaff(model.StaffId, (int)model.Transfer_To_Campus, model.ReportingOfficerId, model.DepartmentId, model.DesignationId);

                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            ModelState.AddModelError("", $"Error while saving data: {ex.Message}");
                            return RedirectToAction("Create");
                        }
                    }

                    return RedirectToAction("Index");
                }
                return RedirectToAction("Create");
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("", $"Unexpected error: {ex.Message}");
                return RedirectToAction("Create");
            }
        }
        public void TransferStaff(int StaffId,int ToCampusId, int? ReportingOfficerId, int? DepartmentId,int? DesignationId)
        {
            if (DepartmentId != null && DesignationId != null)
            {
                if (ToCampusId == 11)
                    db.Database.ExecuteSqlCommand("update staffinfo set IsAEN=1,DepartmentId=@DepartmentId,Designation_ID=@Designation_ID,ReportingOfficerId=@ReportingOfficerId where staff_Id = @StaffId", new SqlParameter("@StaffId", StaffId), new SqlParameter("@ToCampusId", ToCampusId), new SqlParameter("@DepartmentId", DepartmentId), new SqlParameter("@Designation_ID", DesignationId), new SqlParameter("@ReportingOfficerId", ReportingOfficerId));
                else
                    db.Database.ExecuteSqlCommand("update staffinfo set campusid=@ToCampusId,IsAEN=0,DepartmentId=@DepartmentId,Designation_ID=@Designation_ID,ReportingOfficerId=@ReportingOfficerId where staff_Id = @StaffId", new SqlParameter("@StaffId", StaffId), new SqlParameter("@ToCampusId", ToCampusId), new SqlParameter("@DepartmentId", DepartmentId), new SqlParameter("@Designation_ID", DesignationId), new SqlParameter("@ReportingOfficerId", ReportingOfficerId));
            }
            else
            {
                if (ToCampusId == 11)
                    db.Database.ExecuteSqlCommand("update staffinfo set IsAEN=1,ReportingOfficerId=@ReportingOfficerId where staff_Id = @StaffId", new SqlParameter("@StaffId", StaffId), new SqlParameter("@ToCampusId", ToCampusId), new SqlParameter("@ReportingOfficerId", ReportingOfficerId));
                else
                    db.Database.ExecuteSqlCommand("update staffinfo set campusid=@ToCampusId,IsAEN=0,ReportingOfficerId=@ReportingOfficerId where staff_Id = @StaffId", new SqlParameter("@StaffId", StaffId), new SqlParameter("@ToCampusId", ToCampusId), new SqlParameter("@ReportingOfficerId", ReportingOfficerId));

            }
        }

        public void TransferStaffShift(int StaffId, int ToCampusId)
        {
            db.Database.ExecuteSqlCommand("update StaffShifts set campusid=@ToCampusId where staffId = @StaffId", new SqlParameter("@StaffId", StaffId), new SqlParameter("@ToCampusId", ToCampusId));
        }

        public void TransferUserCampus(int StaffId, int ToCampusId,int CampusId)
        {
            db.Database.ExecuteSqlCommand("update UserCampus set campusid=@ToCampusId where staffId = @StaffId and campusid=@CampusId", new SqlParameter("@StaffId", StaffId), new SqlParameter("@ToCampusId", ToCampusId), new SqlParameter("@CampusId", CampusId));
        }

        public void InsertAENUserCampus(int StaffId, int ToCampusId)
        {
            if(db.UserCampuses.Where(s=>s.StaffId == StaffId).ToList().Any(a=>a.CampusId == 11) == false)
            {
                var userId = db.UserCampuses.Where(a => a.StaffId == StaffId).Select(a => a.UserId).FirstOrDefault();
                db.Database.ExecuteSqlCommand("insert into UserCampus (UserId,CampusId,StaffId,Status) values(@UserId, @ToCampusId, @StaffId, 1)", new SqlParameter("@StaffId", StaffId), new SqlParameter("@ToCampusId", ToCampusId), new SqlParameter("@UserId", userId));
            }
            
        }

        public void TransferUser(int StaffId, int ToCampusId)
        {
            var userId = db.UserCampuses.Where(a => a.StaffId == StaffId).Select(a => a.UserId).FirstOrDefault();
            if(ToCampusId == 11)
                db.Database.ExecuteSqlCommand("update Users set IsAEN=1 where User_Id = @UserId", new SqlParameter("@ToCampusId", ToCampusId), new SqlParameter("@UserId", userId));
            else
                db.Database.ExecuteSqlCommand("update Users set campusid=@ToCampusId ,IsAEN=0 where User_Id = @UserId", new SqlParameter("@ToCampusId", ToCampusId), new SqlParameter("@UserId", userId));
        }

----------------------------------------------------------